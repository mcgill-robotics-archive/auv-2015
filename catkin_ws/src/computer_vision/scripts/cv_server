#! /usr/bin/env python2.7

import rospy
import tf
import numpy as np
from std_msgs.msg import Header
from auv_msgs.msg import CVTarget, SetCVTargetAction, SetCVTargetFeedback
from geometry_msgs.msg import Polygon, Point32
import bin_detection
import lane_detection
from actionlib import SimpleActionServer
from image_geometry import PinholeCameraModel
from cv_bridge import CvBridge
from sensor_msgs.msg import Image, CameraInfo

bins_depth = 4.7268  # 16 ft - 15 cm
down_camera_model = None
bridge = CvBridge()
subscribers = []
target_name = ''


def bins_callback(img):
    project_bottom_callback(bin_detection.findByContours, img)


def lane_callback(img):
    project_bottom_callback(lane_detection.findByContours, img)


def project_bottom_callback(findByContours, img):
    if not down_camera_model:
        rospy.logwarn('No camera info')
        return
    rects, debug_img = findByContours(bridge.imgmsg_to_cv2(img))
    debug_pub.publish(bridge.cv2_to_imgmsg(debug_img, 'bgr8'))
    target_msg = CVTarget()
    header = Header()
    header.frame_id = 'floating_horizon'
    target_msg.header = header
    target_msg.target_name = target_name
    target_msg.targets = project_targets_to_bottom(rects, img.header)
    if len(target_msg.targets) > 0:
        pub.publish(target_msg)
        server.publish_feedback(SetCVTargetFeedback())


def project_targets_to_bottom(targets, header):
    try:
        header.stamp = rospy.Time(0)
        transform = listener.asMatrix('floating_horizon', header)
        # The camera pinhole, in the floating_horizon frame
        perspective_point = np.dot(transform, np.array([0., 0., 0., 1.]))
        perspective_transform = tf.transformations.projection_matrix(
            np.array([0., 0., bins_depth]),
            np.array([0., 0., 1.]),
            perspective=perspective_point)
        transformed_targets = []
        for target in targets:
            target = np.reshape(target, (-1, 2))
            polygon = Polygon()
            for xy in target:
                camera_ray = down_camera_model.projectPixelTo3dRay(xy)
                # Convert to homogeneous vector
                camera_ray = [camera_ray[0], camera_ray[1], camera_ray[2], 1.0]
                point = np.dot(perspective_transform,
                               np.dot(transform, camera_ray))
                if point[3] == 0:
                    rospy.logerr('Invalid homogeneous vector')
                    return
                point_msg = Point32()
                point_msg.x = point[0]/point[3]
                point_msg.y = point[1]/point[3]
                point_msg.z = point[2]/point[3]
                polygon.points.append(point_msg)
            transformed_targets.append(polygon)
        return transformed_targets
    # TODO: Use wait_for_transform?
    except tf.Exception:
        rospy.logerr('Could not get tf between frames {} and {}'
                     .format('floating_horizon', header.frame_id))
        return []


def camera_info_callback(msg):
    global down_camera_model
    if down_camera_model:
        down_camera_model.fromCameraInfo(msg)
    else:
        down_camera_model = PinholeCameraModel()


def register_target():
    global target_name
    target_name = server.accept_new_goal().target_name
    if target_name == CVTarget.BINS:
        subscribers.append(rospy.Subscriber('camera_down/camera_info',
                                            CameraInfo, camera_info_callback))
        subscribers.append(rospy.Subscriber('camera_down/image_rect_color',
                                            Image, bins_callback))
    elif target_name == CVTarget.LANE:
        subscribers.append(rospy.Subscriber('camera_down/camera_info',
                                            CameraInfo, camera_info_callback))
        subscribers.append(rospy.Subscriber('camera_down/image_rect_color',
                                            Image, lane_callback))
    else:
        rospy.logerr('Unknown Target')


def cancel_target():
    global subscribers
    [s.unregister() for s in subscribers]
    subscribers = []
    target_name = ''
    if server.is_active():
        server.set_preempted()

target_map = {CVTarget.BINS: bins_callback}

if __name__ == '__main__':
    global listener, pub, debug_pub, server
    rospy.init_node('cv_server')
    server = SimpleActionServer('cv_server', SetCVTargetAction,
                                auto_start=False)
    server.register_goal_callback(register_target)
    server.register_preempt_callback(cancel_target)
    server.start()
    listener = tf.TransformListener()
    pub = rospy.Publisher('cv/identified_targets', CVTarget, queue_size=100)
    debug_pub = rospy.Publisher('cv/debug_image', Image, queue_size=100)
    rospy.spin()
