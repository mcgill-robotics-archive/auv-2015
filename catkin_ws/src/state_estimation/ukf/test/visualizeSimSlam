#!/usr/bin/env python2.7

import rospy
import rosgraph
from std_msgs.msg import ColorRGBA
from geometry_msgs.msg import Vector3
from visualization_msgs.msg import Marker

red = ColorRGBA()
red.r = 1
red.a = 1
green = ColorRGBA()
green.g = 1
green.a = 1

def publishSphereMarker(name, color, pos):
  marker = Marker()
  marker.header.frame_id = "/robot"
  marker.ns = name
  marker.type = marker.SPHERE
  marker.action = marker.ADD # (really this modifies it)
  marker.scale.x = 0.5
  marker.scale.y = 0.5
  marker.scale.z = 0.5
  marker.color = color
  marker.pose.orientation.w = 1.0
  marker.pose.position.x = pos.x
  marker.pose.position.y = pos.y
  marker.pose.position.z = pos.z
  viz_pub.publish(marker)

def actualPositionCallback(msg, name):
  publishSphereMarker(name, green, msg)
  
def noisyPositionCallback(msg, name):
  publishSphereMarker(name, red, msg)

if __name__ == '__main__':
  global viz_pub
  rospy.init_node('visualizeSimSlam')
  viz_pub = rospy.Publisher('visualization_marker', Marker, queue_size=10)
  
  # Lookup actual positions
  master = rosgraph.Master('visualizeSimSlam')
  topics = master.getPublishedTopics('sim_slam/position/actual')
  for name, _ in topics:
    rospy.Subscriber(name, Vector3, actualPositionCallback, callback_args=name)
  
  # Lookup noisy positions
  topics = master.getPublishedTopics('sim_slam/position/noisy')
  for name, _ in topics:
    rospy.Subscriber(name, Vector3, noisyPositionCallback, callback_args=name)
  
  rospy.spin()
