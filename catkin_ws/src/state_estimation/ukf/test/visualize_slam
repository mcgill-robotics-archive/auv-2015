#!/usr/bin/env python2.7

import rospy
import rosgraph
from std_msgs.msg import ColorRGBA
from auv_msgs.msg import SlamTarget
from auv_msgs.msg import SlamEstimate
from visualization_msgs.msg import Marker
from geometry_msgs.msg import Vector3Stamped
import math

red = ColorRGBA()
red.r = 1
red.a = 0.75
green = ColorRGBA()
green.g = 1
green.a = 0.75
blue = ColorRGBA()
blue.b = 1
blue.a = 0.75

def publishSphereMarker(name, color, msg):
  marker = Marker()
  marker.header.frame_id = "north"
  marker.ns = name
  marker.id = msg.ObjectID
  marker.type = marker.SPHERE
  marker.action = marker.ADD # (really this modifies it)
  marker.scale.x = 0.2
  marker.scale.y = 0.2
  marker.scale.z = 0.2
  marker.color = color
  marker.pose.orientation.w = 1.0
  marker.pose.position.x = msg.xPos
  marker.pose.position.y = msg.yPos
  viz_pub.publish(marker)

def actualPositionCallback(msg):
  slam_msg = SlamTarget()
  slam_msg.ObjectID = -1
  slam_msg.xPos = msg.vector.x
  slam_msg.yPos = msg.vector.y
  publishSphereMarker("actual" + msg.header.frame_id, green, slam_msg)
  
def mapDataCallback(msg):
  twice_theta = math.atan2(2*msg.var_xy, msg.var_xx - msg.var_xy)
  marker = Marker()
  marker.header.frame_id = "north"
  marker.ns = "estimate" + msg.ObjectID
  marker.type = marker.SPHERE
  marker.action = marker.ADD # (really this modifies it)
  marker.scale.x = 5*math.sqrt(msg.var_xx)
  marker.scale.y = 5*math.sqrt(msg.var_yy)
  marker.scale.z = 0.001
  marker.color = blue
  marker.pose.orientation.w = math.cos(twice_theta)
  marker.pose.orientation.z = math.sin(twice_theta)
  marker.pose.position.x = msg.xPos
  marker.pose.position.y = msg.yPos
  viz_pub.publish(marker)

if __name__ == '__main__':
  global viz_pub
  rospy.init_node('visualizeSimSlam')
  viz_pub = rospy.Publisher('visualization_marker', Marker, queue_size=1000)
  rospy.Subscriber('sim_slam/position/actual', Vector3Stamped, actualPositionCallback)
  rospy.Subscriber('map_data', SlamEstimate, mapDataCallback)
  
  rospy.spin()
