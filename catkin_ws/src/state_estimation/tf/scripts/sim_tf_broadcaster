#!/usr/bin/env python2.7

import rospy
from std_msgs.msg import Float64
from geometry_msgs.msg import PoseStamped
from gazebo_msgs.msg import ModelStates
from tf import TransformBroadcaster
from tf.transformations import quaternion_from_euler, euler_from_quaternion
from math import pi

FREQUENCY = 500 # Hz

time = None
zero = (0, 0, 0)

def callback(modelStates):
    global time, broadcaster
    if time:
        if (rospy.get_time() - time)*FREQUENCY > 1:
            index = modelStates.name.index('robot')
            q_msg = modelStates.pose[index].orientation
            q = [q_msg.x, -q_msg.y, -q_msg.z, q_msg.w]
            q_yaw = quaternion_from_euler(0, 0, euler_from_quaternion(q)[2])
            t = rospy.get_rostime()
            broadcaster.sendTransform(zero, q, t,
                '/robot', '/robot/initial_horizon')
            broadcaster.sendTransform(zero, q_yaw, t, 
                '/robot/horizon', '/robot/initial_horizon')
            time = rospy.get_time()
    else:
        time = rospy.get_time()


# Init the ros node, subscribers and publishers
# And run the node
def init():
    global broadcaster
    rospy.init_node('sim_depth')
    rospy.Subscriber('/gazebo/model_states', ModelStates, callback)
    broadcaster = TransformBroadcaster()
    rospy.spin()

if __name__ == '__main__':
    try:
        init()
    except rospy.ROSInterruptException:
        pass
