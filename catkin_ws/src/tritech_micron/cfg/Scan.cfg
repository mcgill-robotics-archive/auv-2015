#!/usr/bin/env python
# -*- coding: utf-8 -*-

import math
from dynamic_reconfigure.parameter_generator_catkin import *


def to_radians(angle):
    """Converts units of 1/16th of a gradian to radians.

    Args:
        angle: Angle in units of 1/16th of a gradian.

    Returns:
        Angle in radians.
    """
    return angle / 3200.0 * math.pi


two_pi = 2 * math.pi
gen = ParameterGenerator()

gen.add("continuous", bool_t, 0, "Scan continuously or only a sector", True)
gen.add("scanright", bool_t, 0, "Rotate clockwise", True)
gen.add("adc8on", bool_t, 0, "ADC 8 mode", True)
gen.add("ad_low", double_t, 0, "Minimum amplitude in dB", 0, 0, 80)
gen.add("ad_high", double_t, 0, "Maximum amplitude in dB", 80, 0, 80)
gen.add("left_limit", double_t, 0, "Left limit in rad", 0, 0, two_pi)
gen.add("right_limit", double_t, 0, "Right limit in rad",
        to_radians(6399), 0, two_pi)
gen.add("range", double_t, 0, "Range in meters", 5, 2, 100)
gen.add("mo_time", int_t, 0, "Motor speed in microseconds", 250, 0, 2550)
gen.add("nbins", int_t, 0, "Number of bins per slice", 200, 0, 1500)

resolutions = gen.enum([
    gen.const("FASTEST", double_t, to_radians(255), "Fastest scan"),
    gen.const("FASTER", double_t, to_radians(128), "Faster scan"),
    gen.const("FAST", double_t, to_radians(64), "Fast scan"),
    gen.const("LOW", double_t, to_radians(32), "Low resolution"),
    gen.const("MEDIUM", double_t, to_radians(16), "Medium resolution"),
    gen.const("HIGH", double_t, to_radians(8), "High resolution"),
    gen.const("ULTIMATE", double_t, to_radians(4), "Ultimate resolution")
], "Default resolution enumeration")

gen.add("step", double_t, 0, "Motor step size in rad",
        to_radians(32), to_radians(1), to_radians(255),
        edit_method=resolutions)

exit(gen.generate("tritech_micron", "tritech_micron", "Scan"))
