#!/usr/bin/env python
from math import pi
import numpy as np
import rospy
from geometry_msgs.msg import Wrench
from auv_msgs.msg import (
    SetVelocityAction, SetVelocityFeedback, SetPositionAction,
    SetPositionFeedback, TDOAs, AcousticServoAction, AcousticServoFeedback)
import tf
from tf.transformations import euler_from_quaternion, euler_matrix
from actionlib import SimpleActionServer
from std_msgs.msg import Bool

# flake8 wants these declared up here
pos_server = None
vel_server = None
hydro_server = None

depth_desired = 0.0
depth_estimated = 0.0
angles_desired = np.zeros(3)
proportional_error = np.zeros(4)
integral_error = np.zeros(4)

# Position control
target_frame_id = ''
pos_desired = np.zeros(2)
pos_integral_error = np.zeros(2)
pos_proportional_error = np.zeros(2)

# Acoustic servoing
tdoas = np.zeros(2)
tdoas_integral = np.zeros(2)
tdoas = np.zeros(2)

# Absolute value
surge_speed = 0.0
sway_speed = 0.0

server = None
listener = None
wrenchPublisher = None
mission = False


def normalize_angle(angle, max_angle=pi):
    # Returns angle between -max_angle and max_angle
    angle = angle % (2 * pi)
    if angle > pi:
        angle -= 2*pi
    return angle


def set_velocity_callback():
    global angles_desired, surge_speed, sway_speed, depth_desired, last_heading
    set_position_preempt()
    acoustic_servo_preempt()
    cmd = vel_server.accept_new_goal().cmd
    angles_desired[0] = cmd.roll
    angles_desired[1] = cmd.pitch
    angles_desired[2] = cmd.yaw
    surge_speed = cmd.surgeSpeed
    sway_speed = cmd.swaySpeed
    depth_desired = cmd.depth
    last_heading = cmd.yaw


def set_position_callback():
    global angles_desired, pos_desired, depth_desired, target_frame_id
    set_velocity_preempt()
    acoustic_servo_preempt()
    cmd = pos_server.accept_new_goal().cmd
    target_frame_id = cmd.target_frame_id
    angles_desired[0] = cmd.roll
    angles_desired[1] = cmd.pitch
    angles_desired[2] = cmd.yaw
    pos_desired[0] = cmd.xPos
    pos_desired[1] = cmd.yPos
    depth_desired = cmd.depth


def acoustic_servo_callback():
    global angles_desired, depth_desired
    set_position_preempt()
    set_velocity_preempt()
    cmd = hydro_server.accept_new_goal().cmd
    angles_desired[0] = cmd.roll
    angles_desired[1] = cmd.pitch
    angles_desired[2] = cmd.yaw
    depth_desired = cmd.depth


def set_velocity_preempt():
    if vel_server.is_active():
        vel_server.set_preempted()


def set_position_preempt():
    if pos_server.is_active():
        pos_server.set_preempted()


def acoustic_servo_preempt():
    if hydro_server.is_active():
        hydro_server.set_preempted()


def get_transform(origin_frame, target_frame):
    global listener
    if not listener:
        listener = tf.TransformListener()
    (trans, rot) = listener.lookupTransform(
        # FROM
        origin_frame,
        # TO
        target_frame,
        # NOW
        rospy.Time())
    return (trans, rot)


def mission_cb(msg):
    global mission
    mission = msg.data


def hydro_cb(msg):
    global tdoas
    tdoas = np.array([
        (msg.port_bow_port_stern +
         (msg.port_bow_starboard_stern - msg.port_bow_starboard_bow))/2.0,
        (msg.port_bow_starboard_bow +
         (msg.port_bow_starboard_stern - msg.port_bow_port_stern))/2.0])


def rosInit():
    global wrenchPublisher, listener, pos_server, vel_server
    global mission_sub, hydro_sub, hydro_server
    rospy.init_node('controls')

    mission_sub = rospy.Subscriber('mission', Bool, mission_cb)
    hydro_sub = rospy.Subscriber('hydrophones', TDOAs, hydro_cb)
    listener = tf.TransformListener()
    vel_server = SimpleActionServer(
        'controls_velocity',
        SetVelocityAction,
        auto_start=False)
    vel_server.register_goal_callback(set_velocity_callback)
    vel_server.register_preempt_callback(set_velocity_preempt)
    vel_server.start()
    pos_server = SimpleActionServer(
        'controls_position',
        SetPositionAction,
        auto_start=False)
    pos_server.register_goal_callback(set_position_callback)
    pos_server.register_preempt_callback(set_position_preempt)
    pos_server.start()
    hydro_server = SimpleActionServer(
        'controls_hydro',
        AcousticServoAction,
        auto_start=False)
    hydro_server.register_goal_callback(acoustic_servo_callback)
    hydro_server.register_preempt_callback(acoustic_servo_preempt)
    hydro_server.start()
    wrenchPublisher = rospy.Publisher(
        'controls/wrench',
        Wrench,
        queue_size=100)
    # Maybe we can use rospy.wait_for_message instead of this?
    t = rospy.Time.now() + rospy.Duration.from_sec(1)
    while rospy.Time.now() < t:
        try:
            get_transform("initial_horizon", "robot")
            break
        except (tf.LookupException, tf.ConnectivityException,
                tf.ExtrapolationException):
            pass


def loop(event):
    global pos_proportional_error, pos_integral_error, proportional_error
    global integral_error, tdoas_prev, tdoas_integral

    if not mission:
        return
    if not (pos_server.is_active() or vel_server.is_active()
            or hydro_server.is_active()):
        return

    try:
        # Velocity control is open-loop
        fx = surge_coeff*surge_speed
        fy = sway_coeff*sway_speed

        # TODO: Use one get_transform
        (trans, rot) = get_transform("/initial_horizon", "/robot")
        angles_estimated = list(euler_from_quaternion(rot))
        (trans, rot) = get_transform('/floating_horizon', '/robot')
        depth_estimated = trans[2]

        if pos_server.is_active():
            (x_err, y_err, _), quaternion = \
                get_transform(target_frame_id, '/horizon')
            yaw_err = euler_from_quaternion(quaternion)[2]
            pos_proportional_error_prev = pos_proportional_error
            pos_proportional_error = pos_desired - np.array([x_err, y_err])
            pos_integral_error += pos_proportional_error * dt
            pos_derivative_error = (pos_proportional_error
                                    - pos_proportional_error_prev)/dt
            fx, fy = (pos_integral_error * pos_integral_gains
                      + pos_proportional_error * pos_proportional_gains
                      + pos_derivative_error * pos_derivative_gains)
            angles_estimated[2] = yaw_err
        elif hydro_server.is_active():
            tdoas_prev = tdoas
            tdoas_integral += tdoas * dt
            tdoas_derivative = (tdoas - tdoas_prev)/dt
            fx, fy = (tdoas_integral * hydro_integral_gains
                      + tdoas * hydro_proportional_gains
                      + tdoas_derivative * tdoas_derivative)

        proportional_error_prev = proportional_error.copy()
        proportional_error[0:3] = angles_desired - angles_estimated
        proportional_error[3] = depth_desired - depth_estimated
        integral_error += proportional_error * dt
        derivative_error = (proportional_error - proportional_error_prev) / dt

        # Correct yaw angle error for wrap around. The other angles are
        # not corrected only small roll and pitch are supported.
        proportional_error[2] = normalize_angle(proportional_error[2])
        derivative_error[2] = normalize_angle(derivative_error[2])

        # Send feedback on yaw error
        if vel_server.is_active():
            feedback = SetVelocityFeedback()
            feedback.yaw_error = proportional_error[2]
            feedback.depth_error = proportional_error[3]
            vel_server.publish_feedback(feedback)
        elif pos_server.is_active():
            feedback = SetPositionFeedback()
            feedback.yaw_error = proportional_error[2]
            feedback.depth_error = proportional_error[3]
            feedback.x_error = pos_proportional_error[0]
            feedback.y_error = pos_proportional_error[1]
            pos_server.publish_feedback(feedback)
        elif hydro_server.is_active():
            feedback = AcousticServoFeedback()
            feedback.yaw_error = proportional_error[2]
            feedback.depth_error = proportional_error[3]
            feedback.x_error = pos_proportional_error[0]
            feedback.y_error = pos_proportional_error[1]
            pos_server.publish_feedback(feedback)

        output = (integral_error * integral_gains
                  + proportional_error * proportional_gains
                  + derivative_error * derivative_gains)

        rospy.loginfo("Integral Error {}".format(integral_error))

        # Need to transform the desired force into the body frame
        # for thrustmapper.
        matrix = euler_matrix(angles_estimated[0], angles_estimated[1], 0).T
        force = np.dot(matrix, [fx, fy, output[3] + 8, 1])[:3]

        wrenchMsg = Wrench()
        wrenchMsg.force.x = force[0]
        wrenchMsg.force.y = force[1]
        wrenchMsg.force.z = force[2]
        wrenchMsg.torque.x = output[0]
        wrenchMsg.torque.y = output[1]
        wrenchMsg.torque.z = output[2]
        wrenchPublisher.publish(wrenchMsg)
    except tf.Exception as e:
        rospy.logerr(e)


if __name__ == '__main__':
    global integral_gains, proportional_gains, derivative_gains, dt
    rosInit()
    integral_gains = np.array([
        rospy.get_param("~ki_roll"),
        rospy.get_param("~ki_pitch"),
        rospy.get_param("~ki_yaw"),
        rospy.get_param("~ki_depth")])
    proportional_gains = np.array([
        rospy.get_param("~kp_roll"),
        rospy.get_param("~kp_pitch"),
        rospy.get_param("~kp_yaw"),
        rospy.get_param("~kp_depth")])
    derivative_gains = np.array([
        rospy.get_param("~kd_roll"),
        rospy.get_param("~kd_pitch"),
        rospy.get_param("~kd_yaw"),
        rospy.get_param("~kd_depth")])
    pos_integral_gains = np.array([
        rospy.get_param('~ki_xPos'),
        rospy.get_param('~ki_yPos')])
    pos_proportional_gains = np.array([
        rospy.get_param('~kp_xPos'),
        rospy.get_param('~kp_yPos')])
    pos_derivative_gains = np.array([
        rospy.get_param('~kd_xPos'),
        rospy.get_param('~kd_yPos')])
    hydro_integral_gains = np.array([
        rospy.get_param('~ki_xHydro'),
        rospy.get_param('~ki_yHydro')])
    hydro_proportional_gains = np.array([
        rospy.get_param('~kp_xHydro'),
        rospy.get_param('~kp_yHydro')])
    hydro_derivative_gains = np.array([
        rospy.get_param('~kd_xHydro'),
        rospy.get_param('~kd_yHydro')])

    surge_coeff = rospy.get_param("~surge_coeff")
    sway_coeff = rospy.get_param("~sway_coeff")

    dt = 0.1
    timer = rospy.Timer(rospy.Duration(dt), loop)
    rospy.on_shutdown(timer.shutdown)
    rospy.spin()
