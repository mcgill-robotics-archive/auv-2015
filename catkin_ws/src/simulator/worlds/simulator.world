<?xml version ='1.0'?>

<sdf version ='1.4'>

  <world name='default'> <!-- Assuming pool is 5m deep -->

    <physics type='ode'>
      <max_step_size>0.001</max_step_size>
      <real_time_factor>1</real_time_factor>
      <real_time_update_rate>1000</real_time_update_rate>
      <gravity>0 0 0</gravity>
    </physics>

    <include>
      <uri>model://sun</uri>
    </include>

	<!-- scene -->
    <scene>
      <background>0.079 .285 .940 1</background>
      <shadows>0</shadows>
      <fog>
	<color>0.079 .285 .940 1</color>
	<type>linear</type>
	<start>1</start>
	<end>100</end>
	<density>50</density>
      </fog>
    </scene>
	<!-- scene done -->

	<!-- robot -->
    <model name="robot">
      <plugin name="robot" filename="librobot.so"></plugin>
      <static>false</static>
      <pose> 1.58725 -3.98664 4.5 0 -0 -3.14159 </pose>

      <link name='body'>
	    <!-- Metric Inertial Properties -->
	    <!-- Units of kg, or kg*m^2 -->
      	<inertial>
      		<mass>22.2006</mass>
      		<inertia>
      			<ixx>0.649156</ixx>
				<ixy>-0.00094</ixy>
				<ixz>-0.04679</ixz>
				<iyy>1.160882</iyy>
				<iyz>0.005052</iyz>
				<izz>1.142592</izz>      			
      		</inertia>
      	</inertial>
      		
		<collision name='collision'>
		  <geometry>
			<mesh>
			  <uri>file://../models/RobotColorGazebo.dae</uri>
			  <scale> .008 .008 .008</scale>
			</mesh>
		  </geometry>
		</collision>
		
		<visual name='visual'>
		  <geometry>
			<mesh>
			  <uri>file://../models/RobotColorGazebo.dae</uri>
			  <scale> .008 .008 .008</scale>
			</mesh>
		  </geometry>
		</visual>
      </link>

	<joint name="rrf_joint" type="revolute">
		<parent>body</parent>
		<child>robot_reference_frame</child>
		<axis>0 0 1</axis>
	</joint>
	
	<link name="robot_reference_frame">
		<pose>0 0 0 3.14159265359 0 1.57079632679</pose> <!--is this still good?-->
	</link>

	  <!-- camera1 -->
      <joint name='camera1' type='revolute'>
		<parent>body</parent>
		<child>camera1_link</child>
		<axis>0 0 1</axis>
		<pose>0 0 0 0 0 0</pose>
      </joint>

      <link name='camera1_link'>
	<pose>0.1 0 0 0 0 -1.507</pose>

	<collision name='collision'>
	  <geometry>
	    <box>
	      <size>.03 .03 .03</size>
	    </box>
	  </geometry>
	</collision>

	<visual name='visual'>
	  <geometry>
	    <box>
	      <size>.03 .03 .03</size>
	    </box>
	  </geometry>
	</visual>

	<sensor type="camera" name="camera1">
	  <update_rate>300.0</update_rate>

	  <camera name="head">
	    <horizontal_fov>1.56079666</horizontal_fov>
	    <image>
	      <width>800</width>
	      <height>800</height>
	      <format>R8G8B8</format>
	    </image>
	    <clip>
	      <near>0.02</near>
	      <far>300</far>
	    </clip>
	    <noise>
	      <type>gaussian</type>-->
	      <mean>0.0</mean>
	      <stddev>0.007</stddev>
	    </noise>
	  </camera>

	  <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
	    <alwaysOn>true</alwaysOn>
	    <updateRate>0.0</updateRate>
	    <cameraName>simulator/camera1</cameraName>
	    <imageTopicName>image_raw</imageTopicName>
	    <cameraInfoTopicName>camera1_info</cameraInfoTopicName>
	    <frameName>camera1_link</frameName>
	    <hackBaseline>0.07</hackBaseline>
	    <distortionK1>0.0</distortionK1>
	    <distortionK2>0.0</distortionK2>
	    <distortionK3>0.0</distortionK3>
	    <distortionT1>0.0</distortionT1>
	    <distortionT2>0.0</distortionT2>
	  </plugin>

	</sensor>

      </link>
	<!-- camera 1 done -->

	  <!-- camera 2 -->
      <joint name='camera2' type='revolute'>
		<parent>body</parent>
		<child>camera2_link</child>
		<axis>0 0 1</axis>
		<pose>0 0 0 0 0 0</pose>
      </joint>

      <link name='camera2_link'>
	<pose>-.1 0 0 0 0 -1.507</pose>

	<collision name='collision'>
	  <geometry>
	    <box>
	      <size>.03 .03 .03</size>
	    </box>
	  </geometry>
	</collision>

	<visual name='visual'>
	  <geometry>
	    <box>
	      <size>.03 .03 .03</size>
	    </box>
	  </geometry>
	</visual>

	<sensor type="camera" name="camera2">
	  <update_rate>300.0</update_rate>

	  <camera name="head">
	    <horizontal_fov>1.56079666</horizontal_fov>
	    <image>
	      <width>800</width>
	      <height>800</height>
	      <format>R8G8B8</format>
	    </image>
	    <clip>
	      <near>0.02</near>
	      <far>300</far>
	    </clip>
	    <noise>
	      <type>gaussian</type>-->
	      <mean>0.0</mean>
	      <stddev>0.007</stddev>
	    </noise>
	  </camera>

	  <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
	    <alwaysOn>true</alwaysOn>
	    <updateRate>0.0</updateRate>
	    <cameraName>simulator/camera2</cameraName>
	    <imageTopicName>image_raw</imageTopicName>
	    <cameraInfoTopicName>camera2_info</cameraInfoTopicName>
	    <frameName>camera2_link</frameName>
	    <hackBaseline>0.07</hackBaseline>
	    <distortionK1>0.0</distortionK1>
	    <distortionK2>0.0</distortionK2>
	    <distortionK3>0.0</distortionK3>
	    <distortionT1>0.0</distortionT1>
	    <distortionT2>0.0</distortionT2>
	  </plugin>

	</sensor>
      </link>
	<!-- camera 2 done -->

	<!-- camera 3 (down) -->
      <joint name='camera3' type='revolute'>
		<parent>body</parent>
		<child>camera3_link</child>
		<axis>0 0 1</axis>
		<pose>0 0 0 0 0 0</pose>
      </joint>

      <link name='camera3_link'>
	<pose>0 .2 -.2 0 1.5 1.57079632679</pose>

	<collision name='collision'>
	  <geometry>
	    <box>
	      <size>.03 .03 .03</size>
	    </box>
	  </geometry>
	</collision>

	<visual name='visual'>
	  <geometry>
	    <box>
	      <size>.03 .03 .03</size>
	    </box>
	  </geometry>
	</visual>

	<sensor type="camera" name="camera3">
	  <update_rate>300.0</update_rate>

	  <camera name="head">
	    <horizontal_fov>1.56079666</horizontal_fov>
	    <image>
	      <width>800</width>
	      <height>800</height>
	      <format>R8G8B8</format>
	    </image>
	    <clip>
	      <near>0.02</near>
	      <far>300</far>
	    </clip>
	    <noise>
	      <type>gaussian</type>-->
	      <mean>0.0</mean>
	      <stddev>0.007</stddev>
	    </noise>
	  </camera>

	  <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
	    <alwaysOn>true</alwaysOn>
	    <updateRate>0.0</updateRate>
	    <cameraName>simulator/camera3</cameraName>
	    <imageTopicName>image_raw</imageTopicName>
	    <cameraInfoTopicName>camera3_info</cameraInfoTopicName>
	    <frameName>camera3_link</frameName>
	    <hackBaseline>0.07</hackBaseline>
	    <distortionK1>0.0</distortionK1>
	    <distortionK2>0.0</distortionK2>
	    <distortionK3>0.0</distortionK3>
	    <distortionT1>0.0</distortionT1>
	    <distortionT2>0.0</distortionT2>
	  </plugin>

	</sensor>
      </link>
      <!-- Camera 3 done -->

    </model>
	<!-- robot model done -->

	<!-- gate -->
    <model name="gate">
      <pose>-0.813998 -0.667664 4.503149 1.5 -0 0</pose>
      <static>false</static>
      <link name="body">

        <collision name="visual">
          <geometry>
            <mesh>
	      <uri>file://../models/GateColor.dae</uri>
	      <scale> .01 .01 .01</scale>
	    </mesh>
          </geometry>
        </collision>

        <visual name="visual">
          <geometry>
            <mesh>
	      <uri>file://../models/GateColor.dae</uri>
	      <scale> .01 .01 .01</scale>
	    </mesh>
          </geometry>
        </visual>

      </link>
      <plugin name="move_model" filename="libmove_model.so"></plugin>
    </model>
	<!-- gate done -->
	
	<!-- line1 -->
    <model name="line1">
      <pose>-2.46864 12.0738 1 1.5708 -0 -0.976815</pose>
      <static>false</static>
      <link name="body">

        <collision name="visual">
          <geometry>
            <mesh>
	      <uri>file://../models/PathColor.dae</uri>
	      <scale> .01 .01 .01</scale>
	    </mesh>
          </geometry>
        </collision>

        <visual name="visual">
          <geometry>
            <mesh>
	      <uri>file://../models/PathColor.dae</uri>
	      <scale> .01 .01 .01</scale>
	    </mesh>
          </geometry>
        </visual>

      </link>
    </model>
	<!-- line1 done -->

	<!-- buoys -->

	<!-- red buoy -->
    <model name="redbuoy">
      <pose>-1.11281 0.866034 4.5 1.5708 0 0.7</pose>
      <static>false</static>
      <link name="body">
        <collision name="visual">
          <geometry>
            <mesh>
			  <uri>file://../models/RedBuoyColor.dae</uri>
			  <scale> .01 .01 .01</scale>
		    </mesh>
          </geometry>
        </collision>

        <visual name="visual">
          <geometry>
            <mesh>
			  <uri>file://../models/RedBuoyColor.dae</uri>
			  <scale> .01 .01 .01</scale>
		    </mesh>
          </geometry>
        </visual>
      </link>
    </model>
    <!-- red buoy done -->
    
	<!-- green buoy -->
    <model name="greenbuoy">
      <pose>0.110936 1.67764 4.5 1.5708 0 0.7</pose>
      <static>false</static>
      <link name="body">
        <collision name="visual">
          <geometry>
            <mesh>
			  <uri>file://../models/GreenBuoyColor.dae</uri>
			  <scale> .01 .01 .01</scale>
		    </mesh>
          </geometry>
        </collision>

        <visual name="visual">
          <geometry>
            <mesh>
			  <uri>file://../models/GreenBuoyColor.dae</uri>
			  <scale> .01 .01 .01</scale>
		    </mesh>
          </geometry>
        </visual>
      </link>
    </model>
    <!-- green buoy done -->

	<!-- yellow buoy -->
    <model name="yellowbuoy">
      <pose>0.909955 2.96303 4.5 1.5708 0 0.7</pose>
      <static>false</static>
      <link name="body">
        <collision name="visual">
          <geometry>
            <mesh>
			  <uri>file://../models/YellowBuoyColor.dae</uri>
			  <scale> .01 .01 .01</scale>
		    </mesh>
          </geometry>
        </collision>

        <visual name="visual">
          <geometry>
            <mesh>
			  <uri>file://../models/YellowBuoyColor.dae</uri>
			  <scale> .01 .01 .01</scale>
		    </mesh>
          </geometry>
        </visual>
      </link>
    </model>
    <!-- yellow buoy done -->

	<!-- buoys done -->
	
	<plugin name="create_torpedo" filename="libcreate_torpedo.so"></plugin>
	
	<!-- adjust camera so the whole arena is visible -->
	<gui fullscreen='0'>
      <camera name='user_camera'>
        <pose>4.45916 -23.9024 16.4144 5.4e-05 0.297657 1.65492</pose>
        <view_controller>orbit</view_controller>
      </camera>
    </gui>

  </world>
</sdf>
