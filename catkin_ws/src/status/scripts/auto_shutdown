#! /usr/bin/env python2.7
import os
import rospy
from std_msgs.msg import Float32
from auv_msgs.msg import CPUTemperature
import numpy


class RingBuffer(object):
    def __init__(self, size):
        self.data = numpy.zeros(size)

    def push(self, datum):
        self.data = numpy.roll(self.data, 1)
        self.data[0] = datum

min_real_voltage = 5
computer_voltages = RingBuffer(50)
computer_warn = 21.0
computer_shutoff = 20.0
motor_voltages = RingBuffer(50)
motor_warn = 11.0
motor_shutoff = 10.5
temperature_values = RingBuffer(50)
temperature_warn = 65
temperature_shutoff = 75


def motor_voltage_cb(msg):
    motor_voltages.push(msg.data)
    val = numpy.median(motor_voltages.data)
    if val > min_real_voltage and val < motor_warn:
        warn('Motor voltage low! {} V'.format(msg.data))
    if val > min_real_voltage and val < motor_shutoff:
        shutdown()


def computer_voltage_cb(msg):
    computer_voltages.push(msg.data)
    val = numpy.median(computer_voltages.data)
    if val > min_real_voltage and val < computer_warn:
        warn('Computer voltage low! {} V'.format(msg.data))
    if val > min_real_voltage and val < computer_shutoff:
        shutdown()


def temperature_cb(msg):
    temperature_values.push(msg.temperature)
    val = numpy.median(temperature_values.data)
    if val > temperature_warn:
        warn('Computer temperature high! {} V'.format(msg.data))
    if val > temperature_shutoff:
        shutdown()


def warn(msg):
    os.system("echo '{}' | wall".format(msg))


def shutdown():
   # os.system("echo 'elgordo21' | sudo --stdin shutdown now -H -P")
   pass


if __name__ == '__main__':
    rospy.init_node('auto_shutdown')
    s1 = rospy.Subscriber(
        'electrical_interface/motorVoltage', Float32, motor_voltage_cb)
    s2 = rospy.Subscriber(
        'electrical_interface/computerVoltage', Float32, computer_voltage_cb)
    s3 = rospy.Subscriber(
        'temperature/temperature', CPUTemperature, temperature_cb)
    rospy.spin()
