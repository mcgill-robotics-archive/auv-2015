#! /usr/bin/env python2.7
# -*- coding: utf-8 -*-

import smach
import smach_ros
import rospy
from threading import Thread
from planner.primitives import SetVelocityState
from planner import tasks
from std_msgs.msg import Bool

__author__ = 'Max Krogius'


def create_state_machine():
    pause = rospy.get_param('~pause')
    countdown = rospy.get_param('~countdown')
    depth = rospy.get_param('~depth')
    speed = rospy.get_param('~speed')
    yaws = rospy.get_param('~yaws')
    times = rospy.get_param('~times')
    if len(yaws) != len(times):
        raise ValueError('~yaws and ~times must have the same length')

    motion_sm = smach.StateMachine(
        outcomes=['succeeded', 'aborted', 'preempted'],
        input_keys=['yaw_setpoint', 'depth_setpoint'],
        output_keys=['yaw_setpoint', 'depth_setpoint'])
    with motion_sm:
        for i in range(len(yaws)):
            smach.StateMachine.add_auto(
                'Yaw {}'.format(yaws[i]),
                SetVelocityState.create_set_yaw_state(yaws[i]),
                connector_outcomes=['succeeded'])
            smach.StateMachine.add_auto(
                'Move Forward {}'.format(times[i]),
                SetVelocityState.create_move_forward_state(
                    speed, rospy.Duration.from_sec(times[i])),
                connector_outcomes=['succeeded'])
            smach.StateMachine.add_auto(
                'Stop {}'.format(i),
                SetVelocityState.create_move_forward_state(
                    0, rospy.Duration.from_sec(1)),
                connector_outcomes=['succeeded'])
        smach.StateMachine.add(
            'Sleep',
            smach_ros.ConditionState(
                lambda x: False,
                poll_rate=rospy.Duration(1),
                max_checks=-1),
            transitions={
                'false': 'succeeded',
                'true': 'aborted'})

    csm = smach.Concurrence(
        ['succeeded', 'aborted', 'preempted'],
        child_termination_cb=lambda x: True,
        default_outcome='aborted',
        outcome_map={'succeeded': {'Motion': 'succeeded'},
                     'preempted': {'Motion': 'preempted'},
                     'aborted': {'Motion': 'aborted'}},
        input_keys=['yaw_setpoint', 'depth_setpoint'],
        output_keys=['yaw_setpoint', 'depth_setpoint'])
    with csm:
        csm.add('Motion', motion_sm)
        csm.add(
            'Monitor Mission',
            smach_ros.MonitorState(
                'mission',
                Bool,
                lambda x, y: False))

    sm = smach.StateMachine(
        ['succeeded', 'preempted', 'aborted'])
    with sm:
        sm.add_auto(
            'Initialize', tasks.initialize(pause, countdown, depth),
            connector_outcomes=['succeeded'])
        sm.add(
            'Motion and Monitor', csm,
            transitions={
                'succeeded': 'Initialize',
                'preempted': 'Initialize',
                'aborted': 'Initialize'})
    return sm


if __name__ == '__main__':
    rospy.init_node('yaw_test')
    sm = create_state_machine()
    sis = smach_ros.IntrospectionServer('yaw_test', sm, '/SM_ROOT')
    sis.start()

    # In order to get smach to respond to ctrl+c we run it in a different
    # thread and request a preempt on ctrl+c.
    smach_thread = Thread(target=lambda: sm.execute())
    smach_thread.start()

    # It is necessary to use the on_shutdown method to request the preempt
    # rather than waiting until after rospy spin to do so. Otherwise, the
    # state machine will not respond to ctrl+c.
    rospy.on_shutdown(sm.request_preempt)
    rospy.spin()
    smach_thread.join()
    sis.stop()
