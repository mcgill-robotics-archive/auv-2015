"""autogenerated by genpy from auv_msgs/Motor.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Motor(genpy.Message):
  _md5sum = "ede24e8c7884b1a6238f81f9f1c05866"
  _type = "auv_msgs/Motor"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 Motor1
int16 Motor2
int16 Motor3
int16 Motor4
int16 Motor5
int16 Motor6
int16 Motor7
int16 Motor8

"""
  __slots__ = ['Motor1','Motor2','Motor3','Motor4','Motor5','Motor6','Motor7','Motor8']
  _slot_types = ['int16','int16','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Motor1,Motor2,Motor3,Motor4,Motor5,Motor6,Motor7,Motor8

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Motor, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Motor1 is None:
        self.Motor1 = 0
      if self.Motor2 is None:
        self.Motor2 = 0
      if self.Motor3 is None:
        self.Motor3 = 0
      if self.Motor4 is None:
        self.Motor4 = 0
      if self.Motor5 is None:
        self.Motor5 = 0
      if self.Motor6 is None:
        self.Motor6 = 0
      if self.Motor7 is None:
        self.Motor7 = 0
      if self.Motor8 is None:
        self.Motor8 = 0
    else:
      self.Motor1 = 0
      self.Motor2 = 0
      self.Motor3 = 0
      self.Motor4 = 0
      self.Motor5 = 0
      self.Motor6 = 0
      self.Motor7 = 0
      self.Motor8 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8h.pack(_x.Motor1, _x.Motor2, _x.Motor3, _x.Motor4, _x.Motor5, _x.Motor6, _x.Motor7, _x.Motor8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.Motor1, _x.Motor2, _x.Motor3, _x.Motor4, _x.Motor5, _x.Motor6, _x.Motor7, _x.Motor8,) = _struct_8h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8h.pack(_x.Motor1, _x.Motor2, _x.Motor3, _x.Motor4, _x.Motor5, _x.Motor6, _x.Motor7, _x.Motor8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.Motor1, _x.Motor2, _x.Motor3, _x.Motor4, _x.Motor5, _x.Motor6, _x.Motor7, _x.Motor8,) = _struct_8h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8h = struct.Struct("<8h")
